/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AuditLogListRelationFilter } from "../../auditLog/base/AuditLogListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { CartWhereUniqueInput } from "../../cart/base/CartWhereUniqueInput";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { NotificationListRelationFilter } from "../../notification/base/NotificationListRelationFilter";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { ReturnRequestListRelationFilter } from "../../returnRequest/base/ReturnRequestListRelationFilter";
import { ReviewListRelationFilter } from "../../review/base/ReviewListRelationFilter";
import { EnumUserRole } from "./EnumUserRole";
import { SupportTicketListRelationFilter } from "../../supportTicket/base/SupportTicketListRelationFilter";
import { WishlistWhereUniqueInput } from "../../wishlist/base/WishlistWhereUniqueInput";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: () => AuditLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AuditLogListRelationFilter)
  @IsOptional()
  @Field(() => AuditLogListRelationFilter, {
    nullable: true,
  })
  auditLogs?: AuditLogListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CartWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CartWhereUniqueInput)
  @IsOptional()
  @Field(() => CartWhereUniqueInput, {
    nullable: true,
  })
  cart?: CartWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  googleId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationListRelationFilter)
  @IsOptional()
  @Field(() => NotificationListRelationFilter, {
    nullable: true,
  })
  notifications?: NotificationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrderWhereUniqueInput)
  @IsOptional()
  @Field(() => OrderWhereUniqueInput, {
    nullable: true,
  })
  order?: OrderWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ReturnRequestListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReturnRequestListRelationFilter)
  @IsOptional()
  @Field(() => ReturnRequestListRelationFilter, {
    nullable: true,
  })
  returnRequests?: ReturnRequestListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ReviewListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReviewListRelationFilter)
  @IsOptional()
  @Field(() => ReviewListRelationFilter, {
    nullable: true,
  })
  reviews?: ReviewListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "Option1";

  @ApiProperty({
    required: false,
    type: () => SupportTicketListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SupportTicketListRelationFilter)
  @IsOptional()
  @Field(() => SupportTicketListRelationFilter, {
    nullable: true,
  })
  supportTickets?: SupportTicketListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => WishlistWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WishlistWhereUniqueInput)
  @IsOptional()
  @Field(() => WishlistWhereUniqueInput, {
    nullable: true,
  })
  wishlist?: WishlistWhereUniqueInput;
}

export { UserWhereInput as UserWhereInput };
