/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  AuditLog as PrismaAuditLog,
  Notification as PrismaNotification,
  ReturnRequest as PrismaReturnRequest,
  Review as PrismaReview,
  SupportTicket as PrismaSupportTicket,
  Cart as PrismaCart,
  Order as PrismaOrder,
  Wishlist as PrismaWishlist,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create(args);
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update(args);
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findAuditLogs(
    parentId: string,
    args: Prisma.AuditLogFindManyArgs
  ): Promise<PrismaAuditLog[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .auditLogs(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findReturnRequests(
    parentId: string,
    args: Prisma.ReturnRequestFindManyArgs
  ): Promise<PrismaReturnRequest[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .returnRequests(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async findSupportTickets(
    parentId: string,
    args: Prisma.SupportTicketFindManyArgs
  ): Promise<PrismaSupportTicket[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .supportTickets(args);
  }

  async getCart(parentId: string): Promise<PrismaCart | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .cart();
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }

  async getWishlist(parentId: string): Promise<PrismaWishlist | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .wishlist();
  }
}
