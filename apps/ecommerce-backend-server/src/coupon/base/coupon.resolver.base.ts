/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Coupon } from "./Coupon";
import { CouponCountArgs } from "./CouponCountArgs";
import { CouponFindManyArgs } from "./CouponFindManyArgs";
import { CouponFindUniqueArgs } from "./CouponFindUniqueArgs";
import { CreateCouponArgs } from "./CreateCouponArgs";
import { UpdateCouponArgs } from "./UpdateCouponArgs";
import { DeleteCouponArgs } from "./DeleteCouponArgs";
import { CouponService } from "../coupon.service";
@graphql.Resolver(() => Coupon)
export class CouponResolverBase {
  constructor(protected readonly service: CouponService) {}

  async _couponsMeta(
    @graphql.Args() args: CouponCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Coupon])
  async coupons(@graphql.Args() args: CouponFindManyArgs): Promise<Coupon[]> {
    return this.service.coupons(args);
  }

  @graphql.Query(() => Coupon, { nullable: true })
  async coupon(
    @graphql.Args() args: CouponFindUniqueArgs
  ): Promise<Coupon | null> {
    const result = await this.service.coupon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Coupon)
  async createCoupon(@graphql.Args() args: CreateCouponArgs): Promise<Coupon> {
    return await this.service.createCoupon({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Coupon)
  async updateCoupon(
    @graphql.Args() args: UpdateCouponArgs
  ): Promise<Coupon | null> {
    try {
      return await this.service.updateCoupon({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Coupon)
  async deleteCoupon(
    @graphql.Args() args: DeleteCouponArgs
  ): Promise<Coupon | null> {
    try {
      return await this.service.deleteCoupon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
