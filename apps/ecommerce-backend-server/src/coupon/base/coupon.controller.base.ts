/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CouponService } from "../coupon.service";
import { CouponCreateInput } from "./CouponCreateInput";
import { Coupon } from "./Coupon";
import { CouponFindManyArgs } from "./CouponFindManyArgs";
import { CouponWhereUniqueInput } from "./CouponWhereUniqueInput";
import { CouponUpdateInput } from "./CouponUpdateInput";

export class CouponControllerBase {
  constructor(protected readonly service: CouponService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coupon })
  async createCoupon(@common.Body() data: CouponCreateInput): Promise<Coupon> {
    return await this.service.createCoupon({
      data: data,
      select: {
        code: true,
        createdAt: true,
        discountType: true,
        expirationDate: true,
        id: true,
        isActive: true,
        minOrderAmount: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Coupon] })
  @ApiNestedQuery(CouponFindManyArgs)
  async coupons(@common.Req() request: Request): Promise<Coupon[]> {
    const args = plainToClass(CouponFindManyArgs, request.query);
    return this.service.coupons({
      ...args,
      select: {
        code: true,
        createdAt: true,
        discountType: true,
        expirationDate: true,
        id: true,
        isActive: true,
        minOrderAmount: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async coupon(
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<Coupon | null> {
    const result = await this.service.coupon({
      where: params,
      select: {
        code: true,
        createdAt: true,
        discountType: true,
        expirationDate: true,
        id: true,
        isActive: true,
        minOrderAmount: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCoupon(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() data: CouponUpdateInput
  ): Promise<Coupon | null> {
    try {
      return await this.service.updateCoupon({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          discountType: true,
          expirationDate: true,
          id: true,
          isActive: true,
          minOrderAmount: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCoupon(
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<Coupon | null> {
    try {
      return await this.service.deleteCoupon({
        where: params,
        select: {
          code: true,
          createdAt: true,
          discountType: true,
          expirationDate: true,
          id: true,
          isActive: true,
          minOrderAmount: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
