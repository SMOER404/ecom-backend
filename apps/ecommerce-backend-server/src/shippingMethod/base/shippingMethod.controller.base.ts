/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShippingMethodService } from "../shippingMethod.service";
import { ShippingMethodCreateInput } from "./ShippingMethodCreateInput";
import { ShippingMethod } from "./ShippingMethod";
import { ShippingMethodFindManyArgs } from "./ShippingMethodFindManyArgs";
import { ShippingMethodWhereUniqueInput } from "./ShippingMethodWhereUniqueInput";
import { ShippingMethodUpdateInput } from "./ShippingMethodUpdateInput";

export class ShippingMethodControllerBase {
  constructor(protected readonly service: ShippingMethodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShippingMethod })
  async createShippingMethod(
    @common.Body() data: ShippingMethodCreateInput
  ): Promise<ShippingMethod> {
    return await this.service.createShippingMethod({
      data: data,
      select: {
        createdAt: true,
        estimatedDeliveryDays: true,
        id: true,
        isActive: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShippingMethod] })
  @ApiNestedQuery(ShippingMethodFindManyArgs)
  async shippingMethods(
    @common.Req() request: Request
  ): Promise<ShippingMethod[]> {
    const args = plainToClass(ShippingMethodFindManyArgs, request.query);
    return this.service.shippingMethods({
      ...args,
      select: {
        createdAt: true,
        estimatedDeliveryDays: true,
        id: true,
        isActive: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShippingMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shippingMethod(
    @common.Param() params: ShippingMethodWhereUniqueInput
  ): Promise<ShippingMethod | null> {
    const result = await this.service.shippingMethod({
      where: params,
      select: {
        createdAt: true,
        estimatedDeliveryDays: true,
        id: true,
        isActive: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShippingMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShippingMethod(
    @common.Param() params: ShippingMethodWhereUniqueInput,
    @common.Body() data: ShippingMethodUpdateInput
  ): Promise<ShippingMethod | null> {
    try {
      return await this.service.updateShippingMethod({
        where: params,
        data: data,
        select: {
          createdAt: true,
          estimatedDeliveryDays: true,
          id: true,
          isActive: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShippingMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShippingMethod(
    @common.Param() params: ShippingMethodWhereUniqueInput
  ): Promise<ShippingMethod | null> {
    try {
      return await this.service.deleteShippingMethod({
        where: params,
        select: {
          createdAt: true,
          estimatedDeliveryDays: true,
          id: true,
          isActive: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
