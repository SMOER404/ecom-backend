/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ShippingMethod as PrismaShippingMethod } from "@prisma/client";

export class ShippingMethodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShippingMethodCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shippingMethod.count(args);
  }

  async shippingMethods(
    args: Prisma.ShippingMethodFindManyArgs
  ): Promise<PrismaShippingMethod[]> {
    return this.prisma.shippingMethod.findMany(args);
  }
  async shippingMethod(
    args: Prisma.ShippingMethodFindUniqueArgs
  ): Promise<PrismaShippingMethod | null> {
    return this.prisma.shippingMethod.findUnique(args);
  }
  async createShippingMethod(
    args: Prisma.ShippingMethodCreateArgs
  ): Promise<PrismaShippingMethod> {
    return this.prisma.shippingMethod.create(args);
  }
  async updateShippingMethod(
    args: Prisma.ShippingMethodUpdateArgs
  ): Promise<PrismaShippingMethod> {
    return this.prisma.shippingMethod.update(args);
  }
  async deleteShippingMethod(
    args: Prisma.ShippingMethodDeleteArgs
  ): Promise<PrismaShippingMethod> {
    return this.prisma.shippingMethod.delete(args);
  }
}
