/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShippingMethod } from "./ShippingMethod";
import { ShippingMethodCountArgs } from "./ShippingMethodCountArgs";
import { ShippingMethodFindManyArgs } from "./ShippingMethodFindManyArgs";
import { ShippingMethodFindUniqueArgs } from "./ShippingMethodFindUniqueArgs";
import { CreateShippingMethodArgs } from "./CreateShippingMethodArgs";
import { UpdateShippingMethodArgs } from "./UpdateShippingMethodArgs";
import { DeleteShippingMethodArgs } from "./DeleteShippingMethodArgs";
import { ShippingMethodService } from "../shippingMethod.service";
@graphql.Resolver(() => ShippingMethod)
export class ShippingMethodResolverBase {
  constructor(protected readonly service: ShippingMethodService) {}

  async _shippingMethodsMeta(
    @graphql.Args() args: ShippingMethodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShippingMethod])
  async shippingMethods(
    @graphql.Args() args: ShippingMethodFindManyArgs
  ): Promise<ShippingMethod[]> {
    return this.service.shippingMethods(args);
  }

  @graphql.Query(() => ShippingMethod, { nullable: true })
  async shippingMethod(
    @graphql.Args() args: ShippingMethodFindUniqueArgs
  ): Promise<ShippingMethod | null> {
    const result = await this.service.shippingMethod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShippingMethod)
  async createShippingMethod(
    @graphql.Args() args: CreateShippingMethodArgs
  ): Promise<ShippingMethod> {
    return await this.service.createShippingMethod({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ShippingMethod)
  async updateShippingMethod(
    @graphql.Args() args: UpdateShippingMethodArgs
  ): Promise<ShippingMethod | null> {
    try {
      return await this.service.updateShippingMethod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShippingMethod)
  async deleteShippingMethod(
    @graphql.Args() args: DeleteShippingMethodArgs
  ): Promise<ShippingMethod | null> {
    try {
      return await this.service.deleteShippingMethod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
